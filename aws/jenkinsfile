pipeline {
    agent any

    environment {
        DB_USER = "$DB_USER"
        DB_HOST = "$DB_HOST"
        DB_DATABASE = "$DB_DATABASE"
        DB_PASSWORD = "$DB_PASSWORD"
        DB_PORT = "$DB_PORT"
  }

    parameters {
        string(
            name: "version_deploy",
            defaultValue: null,
            description: "Set version to Deploy API test-verse"
        )
    }

    stages {
        stage('Pull Image') {
            steps {
                sh "echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin"
                sh "docker pull $DOCKERHUB_USERNAME/test-verse:${params.version_deploy}"
            }
        }

        stage('Verificar pasta') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"

                    // Verifica se a pasta existe
                    def dirExists = sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'test -d /home/ec2-user/test-verse && echo exists'",
                        returnStdout: true
                    ).trim()

                    if (dirExists == 'exists') {
                        echo 'Folder Exist!!!'
                        sh(
                            script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'cd /home/ec2-user/test-verse && docker-compose down'",
                            returnStdout: true
                        )
                        sh(
                            script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'rm -R /home/ec2-user/test-verse'",
                            returnStdout: true
                        )
                    } else {
                        echo 'A pasta n√£o existe.'
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'git clone https://github.com/LucasKoritar23/test-verse -b develop'",
                        returnStdout: true
                    )
                }
            }
        }

        stage('Change Version file') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'cd /home/ec2-user/test-verse && sed -i 's/test-verse:latest/test-verse:1.0.5/g' docker-compose.yml'",
                        returnStdout: true
                    )
                }
            }
        }

        stage('Set ENVs') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    def envsApp = "export DB_USER=$DB_USER && export DB_HOST=$DB_HOST && export DB_DATABASE=$DB_DATABASE && export DB_PASSWORD=$DB_PASSWORD && export DB_PORT=$DB_PORT"
                    sh "chmod 400 ${pemFile}"
                    sh "printenv"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} '${envsApp}'",
                        returnStdout: true
                    ) 
                }
            }
        }

        stage('Deploy Application EC2') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    sh "printenv"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin'",
                        returnStdout: true
                    )
                    def commandUp = "docker-compose up -d"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'cd /home/ec2-user/test-verse && ${commandUp}'",
                        returnStdout: true
                    )
                    // sh "ssh -i '${pemFile}' ec2-user@${EC2_HOST} echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin"
                    // sh "ssh -i '${pemFile}' ec2-user@${EC2_HOST} cd /home/ec2-user/test-verse && docker-compose up -d"
                }
            }
        }

        stage('Check Version Deployed EC2') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    // sh "ssh -i '${pemFile}' ec2-user@${EC2_HOST} docker images"
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'docker images'",
                        returnStdout: true
                    )
                    sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'printenv'",
                        returnStdout: true
                    )
                }
            }
        }
    }
}