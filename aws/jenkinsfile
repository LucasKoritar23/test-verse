pipeline {
    agent any

    parameters {
        string(
            name: "version_deploy",
            defaultValue: null,
            description: "Set version to Deploy API test-verse"
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        url: 'git@github.com:LucasKoritar23/test-verse.git',
                        credentialsId: 'ssh-key-github'
                    ]]
                ])
            }
        }

        stage('Pull Image') {
            steps {
                sh "echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin"
                sh "docker pull $DOCKERHUB_USERNAME/test-verse:${params.version_deploy}"
            }
        }

        stage('Change Version file') {
            steps {
                script {
                    def dockerComposeFile = readFile('docker-compose.yml')
                    dockerComposeFile = dockerComposeFile.replace('test-verse:latest', "test-verse:${params.version_deploy}")
                    writeFile file: 'docker-compose.yml', text: dockerComposeFile
                }
            }
        }

        stage('Verificar pasta') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"

                    // Verifica se a pasta existe
                    def dirExists = sh(
                        script: "ssh -i '${pemFile}' ec2-user@${EC2_HOST} 'test -d /home/ec2-user/test-verse && echo exists'",
                        returnStdout: true
                    ).trim()

                    if (dirExists == 'exists') {
                        sh "ssh ec2-user@${EC2_HOST} cd /home/ec2-user/test-verse && docker-compose down"
                        sh "ssh ec2-user@${EC2_HOST} rm -r /home/ec2-user/test-verse"
                    } else {
                        echo 'A pasta n√£o existe.'
                    }
                }
            }
        }

        stage('Copy Files to EC2') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    sh "scp -i '${pemFile}' -r /var/jenkins_home/workspace/pipeline-test-verse-deploy ec2-user@${EC2_HOST}:/home/ec2-user/test-verse"
                }
            }
        }

        stage('Deploy Application EC2') {
            steps {
                script {
                    def pemFile = '/var/jenkins_home/workspace/creds/test-verse-api.pem'
                    sh "chmod 400 ${pemFile}"
                    sh "ssh -i '${pemFile}' ec2-user@${EC2_HOST}:/home/ec2-user/test-verse"
                }
            }
        }
    }


}