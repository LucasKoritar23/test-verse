pipeline {
    agent any
    
    stages {
        stage('Clone repository') {
            steps {
                git credentialsId: 'ssh-key-github', url: 'https://github.com/LucasKoritar23/test-verse'
            }
        }
        
        stage('Build and Start Application') {
            steps {
                script {
                    // Iniciar containers via Docker Compose
                    sh 'docker-compose up -d'
                    
                    // Aguardar até que os serviços estejam prontos para aceitar conexões
                    waitUntil {
                        sh 'docker-compose ps -q | xargs docker inspect -f \'{{ .State.Status }}\' | grep -v running'
                        return (sh(returnStatus: true, script: 'echo $?').trim() == '1')
                    }
                    
                    // Realizar o build do projeto
                    sh 'npm install'
                    
                    // Startar a aplicação
                    sh 'nodemon api/suites/index.js &&'
                    
                    // Aguardar alguns segundos para garantir que a aplicação esteja em execução
                    sleep 10
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                // Executar os testes
                sh 'npm test'
            }
        }
        
        stage('Deploy') {
            steps {
                // Se os testes passarem, prosseguir com o deploy
                script {
                    if (currentBuild.result == 'SUCCESS') {
                        // Seu comando de deploy aqui
                    } else {
                        error('Falha nos testes. O deploy não será realizado.')
                    }
                }
            }
        }
    }
    
    post {
        success {
            // Enviar mensagem de sucesso para o Discord via webhook
            sh 'curl -X POST -H "Content-Type: application/json" -d \'{"content": "Build, testes e deploy concluídos com sucesso!"}\' ${DISCORD_WEBHOOK_URL}'
        }
        
        failure {
            // Enviar mensagem de falha para o Discord via webhook
            sh 'curl -X POST -H "Content-Type: application/json" -d \'{"content": "Falha na build, testes ou deploy!"}\' ${DISCORD_WEBHOOK_URL}'
        }
    }
}
