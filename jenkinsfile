pipeline {
    agent any

    environment {
        DB_USER = "$DB_USER"
        DB_HOST = "$DB_HOST"
        DB_DATABASE = "$DB_DATABASE"
        DB_PASSWORD = "$DB_PASSWORD"
        DB_PORT = "$DB_PORT"
  }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        url: 'git@github.com:LucasKoritar23/test-verse.git',
                        credentialsId: 'ssh-key-github'
                    ]]
                ])
            }
        }

        stage('Start Notify') {
            steps {
                sh '''
                        curl -X POST -H "Content-Type: application/json" -d '{
                            "username": "'${JOB_NAME}'",
                            "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                            "embeds": [{
                                "title": "Build Report",
                                "description": "Starting Build ⏳",
                                "color": 16776960,
                                "footer": {
                                    "text": "test-verse API"
                                },
                                "fields": [
                                    {
                                        "name": "Pipeline Name",
                                        "value": "'${JOB_NAME}'"
                                    },
                                    {
                                        "name": "Build ID",
                                        "value": "'${BUILD_ID}'"
                                    },
                                    {
                                        "name": "Pipeline URL",
                                        "value": "'${BUILD_URL}'"
                                    }
                                ]
                            }]
                        }' "$DISCORD_WEBHOOK_URL"
                    '''
            }
        }
        
        stage('Check Docker and docker-compose') {
            steps {
                script {
                    sh 'docker -v'
                    sh 'docker-compose -v'
                }
            }
        }

        stage('Check NodeJS and NPM') {
            steps {
                script {
                    sh 'node -v'
                    sh 'npm -v'
                }
            }
        }

        stage('Check Files') {
            steps {
                script {
                    sh 'ls -la'
                    sh 'pwd'
                }
            }
        }

        stage('Build Docker Application') {
            steps {
                script {
                    // sh 'docker build -t test-verse:${BUILD_ID} .'
                    // Incremento da tag
                    def currentTag = getLatestTagFromDockerHub() // Função para obter a última tag do Docker Hub, implemente conforme a sua necessidade
                    def newTag = incrementTag(currentTag)
                
                    // Realiza o build da imagem com a nova tag
                    sh "docker build -t $DOCKERHUB_USERNAME/test-verse:${newTag} ."
                }
            }
        }

        stage('Publish') {
            steps {
                // Realiza o login no Docker Hub usando as credenciais do Jenkins
                withCredentials([string(credentialsId: 'access-token-docker-hub', variable: 'DOCKERHUB_TOKEN')]) {
                    sh "docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_TOKEN"
                }

                // Faz upload da imagem para o Docker Hub com a nova tag
                sh "docker push $DOCKERHUB_USERNAME/test-verse:${newTag}"
            }
}

                
        // stage('Deploy') {
        //     steps {
        //         // Atualizar a imagem no arquivo docker-compose.yml
        //         script {
        //         def dockerComposeFile = readFile('docker-compose.yml')
        //         dockerComposeFile = dockerComposeFile.replace('test-verse:latest', 'test-verse:${BUILD_ID}')
        //         writeFile file: 'docker-compose.yml', text: dockerComposeFile
        //         }
                
        //         // Executar o deploy usando o Docker Compose
        //         sh 'docker-compose up -d'
        //     }
        // }

        // stage('Pos Deploy DB Scripts') {
        //     steps {
        //         sh 'npm install'
        //         sh 'node /var/jenkins_home/workspace/pipeline-test-verse/db/applyScripts.js'
        //     }
        // }
    }
    
    post {
        success {
            sh '''
                curl -X POST -H "Content-Type: application/json" -d '{
                    "username": "'${JOB_NAME}'",
                    "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                    "embeds": [{
                        "title": "Build Report",
                        "description": "Build successful! :white_check_mark:",
                        "color": 65340,
                        "footer": {
                            "text": "test-verse API"
                        },
                        "fields": [
                            {
                                "name": "Pipeline Name",
                                "value": "'${JOB_NAME}'"
                            },
                            {
                                "name": "Build ID",
                                "value": "'${BUILD_ID}'"
                            },
                            {
                                "name": "Pipeline URL",
                                "value": "'${BUILD_URL}'"
                            }
                        ]
                    }]
                }' "$DISCORD_WEBHOOK_URL"
            '''

        }
        
        failure {
            sh '''
                curl -X POST -H "Content-Type: application/json" -d '{
                    "username": "'${JOB_NAME}'",
                    "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                    "embeds": [{
                        "title": "Build Report",
                        "description": "Build error! :frowning2:",
                        "color": 16711680,
                        "footer": {
                            "text": "test-verse API"
                        },
                        "fields": [
                            {
                                "name": "Pipeline Name",
                                "value": "'${JOB_NAME}'"
                            },
                            {
                                "name": "Build ID",
                                "value": "'${BUILD_ID}'"
                            },
                            {
                                "name": "Pipeline URL",
                                "value": "'${BUILD_URL}'"
                            }
                        ]
                    }]
                }' "$DISCORD_WEBHOOK_URL"
            '''
        }
    }
}

def incrementTag(currentTag) {
    if (currentTag == null || currentTag.trim().isEmpty()) {
        return '1.0.0'
    }
    
    def parts = currentTag.tokenize('.')
    def major = parts[0].toInteger()
    def minor = parts[1].toInteger()
    def patch = parts[2].toInteger()
    
    patch += 1
    
    def newTag = "${major}.${minor}.${patch}"
    return newTag
}