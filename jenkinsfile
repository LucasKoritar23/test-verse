pipeline {
    agent any

    environment {
        GIT_TAG = ''
        MY_VERSION = ''
        DB_USER = sh(returnStdout: true, script: 'echo $DB_USER').trim()
        DB_HOST = sh(returnStdout: true, script: 'echo $DB_HOST').trim()
        DB_DATABASE = sh(returnStdout: true, script: 'echo $DB_DATABASE').trim()
        DB_PASSWORD = sh(returnStdout: true, script: 'echo $DB_PASSWORD').trim()
        DB_PORT = sh(returnStdout: true, script: 'echo $DB_PORT').trim()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        url: 'git@github.com:LucasKoritar23/test-verse.git',
                        credentialsId: 'ssh-key-github'
                    ]]
                ])
            }
        }

        stage('Start Notify') {
            steps {
                script {
                    def discordWebhookUrl = "$DISCORD_WEBHOOK_URL"
                    def jobName = "${JOB_NAME}"
                    def buildId = "${BUILD_ID}"
                    def buildUrl = "${BUILD_URL}"

                    sh """
                        curl -s -X POST -H 'Content-Type: application/json' -d '{
                            "username": "$jobName",
                            "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                            "embeds": [{
                                "title": "Build Report",
                                "description": "Starting Build ⏳",
                                "color": 16776960,
                                "footer": {
                                    "text": "test-verse API"
                                },
                                "fields": [
                                    {
                                        "name": "Pipeline Name",
                                        "value": "$jobName"
                                    },
                                    {
                                        "name": "Build ID",
                                        "value": "$buildId"
                                    },
                                    {
                                        "name": "Pipeline URL",
                                        "value": "$buildUrl"
                                    }
                                ]
                            }]
                        }' "$discordWebhookUrl"
                    """
                }
            }
        }

        stage('Check Dependencies for Build') {
            steps {
                sh 'docker -v'
                sh 'docker-compose -v'
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Remove Local Tags') {
            steps {
                sh 'git tag | xargs git tag -d'
            }
        }

        stage('Set Version') {
            steps {
                script {
                    sh "git fetch --tags"
                    def tags = []
                    try {
                        tags = sh(returnStdout: true, script: 'git tag -l')
                            .trim()
                            .split('\n')
                            .collect { it.trim() }
                    } catch (Exception e) {
                        echo "Erro ao buscar as tags locais: ${e.message}"
                    }

                    echo "Tags: ${tags}"

                    def lastTag = ''

                    if (tags && tags.size() > 0) {
                        lastTag = tags.last()
                        echo "Última tag encontrada: ${lastTag}"
                    } else {
                        def primeiraTag = '1.0.0'
                        echo "Nenhuma tag encontrada. Definindo a primeira tag: ${primeiraTag}"
                        lastTag = primeiraTag
                    }

                    def tagName = incrementTag(lastTag)

                    echo "Tag que irá ser deployada: ${tagName}"

                    GIT_TAG = "${tagName}"

                    sshagent(credentials: ['ssh-key-github']) {
                        sh "git config user.name 'Jenkins Devops'"
                        sh "git config user.email '${GIT_EMAIL}'"
                        sh "git tag ${tagName}" // Create the tag in Git
                        sh "git push origin ${tagName}" // Push the tag to the remote repository
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def repository = "$DOCKERHUB_USERNAME/test-verse"
                    def dockerTag = "${GIT_TAG}"
                    def dockerHubToken = 'access-token-docker-hub'

                    docker.withRegistry('https://registry.hub.docker.com', dockerHubToken) {
                        def dockerImage = docker.build("${repository}:${dockerTag}", '.')
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
            script {
                def discordWebhookUrl = "$DISCORD_WEBHOOK_URL"
                def jobName = "${JOB_NAME}"
                def buildId = "${BUILD_ID}"
                def buildUrl = "${BUILD_URL}"
                def gitTag = "${GIT_TAG}"

                sh """
                    curl -s -X POST -H 'Content-Type: application/json' -d '{
                        "username": "$jobName",
                        "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                        "embeds": [{
                            "title": "Build Report",
                            "description": "Build successful! :white_check_mark:",
                            "color": 65340,
                            "footer": {
                                "text": "test-verse API"
                            },
                            "fields": [
                                {
                                    "name": "Pipeline Name",
                                    "value": "$jobName"
                                },
                                {
                                    "name": "Image ID",
                                    "value": "$gitTag"
                                },
                                {
                                    "name": "Build ID",
                                    "value": "$buildId"
                                },
                                {
                                    "name": "Pipeline URL",
                                    "value": "$buildUrl"
                                }
                            ]
                        }]
                    }' "$discordWebhookUrl"
                """
            }
        }

        failure {
            echo 'Pipeline execution failed!'
            script {
                def discordWebhookUrl = "$DISCORD_WEBHOOK_URL"
                def jobName = "${JOB_NAME}"
                def buildId = "${BUILD_ID}"
                def buildUrl = "${BUILD_URL}"

                sh """
                    curl -s -X POST -H 'Content-Type: application/json' -d '{
                        "username": "$jobName",
                        "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                        "embeds": [{
                            "title": "Build Report",
                            "description": "Build error! :frowning2:",
                            "color": 16711680,
                            "footer": {
                                "text": "test-verse API"
                            },
                            "fields": [
                                {
                                    "name": "Pipeline Name",
                                    "value": "$jobName"
                                },
                                {
                                    "name": "Build ID",
                                    "value": "$buildId"
                                },
                                {
                                    "name": "Pipeline URL",
                                    "value": "$buildUrl"
                                }
                            ]
                        }]
                    }' "$discordWebhookUrl"
                """
            }
        }
    }
}

def incrementTag(tag) {
    echo "Incrementando tag: ${tag}"
    def mytag = tag.tokenize('.')

    if (GIT_BRANCH == 'origin/master') {
        major = mytag[0].toInteger()
        minor = mytag[1].toInteger() + 1
        patch = 0
    }else {
        major = mytag[0].toInteger()
        minor = mytag[1].toInteger()
        patch = mytag[2].toInteger() + 1
    }

    echo "possible version: ${major}.${minor}.${patch}"
    return "${major}.${minor}.${patch}"
}
