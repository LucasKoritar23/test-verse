def newTag

pipeline {
    agent any

    environment {
        DB_USER = "$DB_USER"
        DB_HOST = "$DB_HOST"
        DB_DATABASE = "$DB_DATABASE"
        DB_PASSWORD = "$DB_PASSWORD"
        DB_PORT = "$DB_PORT"
  }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        url: 'git@github.com:LucasKoritar23/test-verse.git',
                        credentialsId: 'ssh-key-github'
                    ]]
                ])
            }
        }

        stage('Start Notify') {
            steps {
                sh '''
                        curl -X POST -H "Content-Type: application/json" -d '{
                            "username": "'${JOB_NAME}'",
                            "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                            "embeds": [{
                                "title": "Build Report",
                                "description": "Starting Build ⏳",
                                "color": 16776960,
                                "footer": {
                                    "text": "test-verse API"
                                },
                                "fields": [
                                    {
                                        "name": "Pipeline Name",
                                        "value": "'${JOB_NAME}'"
                                    },
                                    {
                                        "name": "Build ID",
                                        "value": "'${BUILD_ID}'"
                                    },
                                    {
                                        "name": "Pipeline URL",
                                        "value": "'${BUILD_URL}'"
                                    }
                                ]
                            }]
                        }' "$DISCORD_WEBHOOK_URL"
                    '''
            }
        }
        
        stage('Check Docker and docker-compose') {
            steps {
                script {
                    sh 'docker -v'
                    sh 'docker-compose -v'
                }
            }
        }

        stage('Check NodeJS and NPM') {
            steps {
                script {
                    sh 'node -v'
                    sh 'npm -v'
                }
            }
        }

        stage('Check Files') {
            steps {
                script {
                    sh 'ls -la'
                    sh 'pwd'
                }
            }
        }

        // stage('Build Docker Application') {
        //     steps {
        //         script {
        //             // sh 'docker build -t test-verse:${BUILD_ID} .'
        //             // Incremento da tag
        //             // Função para obter a última tag do Docker Hub, implemente conforme a sua necessidade

        //             def currentTag = getLatestTagFromDockerHub("$DOCKERHUB_USERNAME/test-verse")
        //             newTag = incrementTag(currentTag)
                
        //             // Realiza o build da imagem com a nova tag
        //             sh "docker build -t $DOCKERHUB_USERNAME/test-verse:${newTag} ."
        //         }
        //     }
        // }

        // stage('Publish') {
        //     steps {
        //         sh "echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin"
        //         // Faz upload da imagem para o Docker Hub com a nova tag
        //         sh "docker push $DOCKERHUB_USERNAME/test-verse:${newTag}"
        //     }
        // }

        stage('Retrieve Latest Version') {
            steps {
                script {
                    // Docker login
                    withDockerRegistry(credentialsId: 'access-token-docker-hub', url: '') {
                        // Perform API request to get latest tags
                        def versionTag = sh(returnStdout: true, script: 'curl -s -H "Authorization: Bearer ${DOCKERHUB_TOKEN}" "https://registry.hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/test-verse/tags/?page_size=1" | jq -r ".results[0].name"')
                        echo "Latest version tag: $versionTag"
                        
                        // Increment the version tag
                        def incrementedVersion = incrementVersion(versionTag)
                        echo "Incremented version: $incrementedVersion"
                        
                        // Set the incremented version as an environment variable for further use
                        env.VERSION_TAG = incrementedVersion
                    }
                }
            }

                
        // stage('Deploy') {
        //     steps {
        //         // Atualizar a imagem no arquivo docker-compose.yml
        //         script {
        //         def dockerComposeFile = readFile('docker-compose.yml')
        //         dockerComposeFile = dockerComposeFile.replace('test-verse:latest', 'test-verse:${BUILD_ID}')
        //         writeFile file: 'docker-compose.yml', text: dockerComposeFile
        //         }
                
        //         // Executar o deploy usando o Docker Compose
        //         sh 'docker-compose up -d'
        //     }
        // }

        // stage('Pos Deploy DB Scripts') {
        //     steps {
        //         sh 'npm install'
        //         sh 'node /var/jenkins_home/workspace/pipeline-test-verse/db/applyScripts.js'
        //     }
        // }
    }
    
    post {
        success {
            sh '''
                curl -X POST -H "Content-Type: application/json" -d '{
                    "username": "'${JOB_NAME}'",
                    "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                    "embeds": [{
                        "title": "Build Report",
                        "description": "Build successful! :white_check_mark:",
                        "color": 65340,
                        "footer": {
                            "text": "test-verse API"
                        },
                        "fields": [
                            {
                                "name": "Pipeline Name",
                                "value": "'${JOB_NAME}'"
                            },
                            {
                                "name": "Build ID",
                                "value": "'${BUILD_ID}'"
                            },
                            {
                                "name": "Pipeline URL",
                                "value": "'${BUILD_URL}'"
                            }
                        ]
                    }]
                }' "$DISCORD_WEBHOOK_URL"
            '''

        }
        
        failure {
            sh '''
                curl -X POST -H "Content-Type: application/json" -d '{
                    "username": "'${JOB_NAME}'",
                    "avatar_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Jenkins_logo.svg/1200px-Jenkins_logo.svg.png",
                    "embeds": [{
                        "title": "Build Report",
                        "description": "Build error! :frowning2:",
                        "color": 16711680,
                        "footer": {
                            "text": "test-verse API"
                        },
                        "fields": [
                            {
                                "name": "Pipeline Name",
                                "value": "'${JOB_NAME}'"
                            },
                            {
                                "name": "Build ID",
                                "value": "'${BUILD_ID}'"
                            },
                            {
                                "name": "Pipeline URL",
                                "value": "'${BUILD_URL}'"
                            }
                        ]
                    }]
                }' "$DISCORD_WEBHOOK_URL"
            '''
        }
    }
}

def incrementVersion(String version) {
    def versionParts = version.split("\\.")
    int lastPart = versionParts[-1] as int
    lastPart++
    versionParts[-1] = lastPart.toString()
    return versionParts.join('.')
}